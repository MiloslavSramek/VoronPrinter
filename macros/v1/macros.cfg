######################### PRINT START / END #########################
[gcode_macro PRINT_START]
# For setting the parameters as persistent variables so they can be referenced in PRINT_START2
variable_bedtemp: 0
variable_hotendtemp: 0
variable_chambertemp: 0
gcode:      
    # Parameters
    {% set bed = params.BED|int %}
    {% set hotend = params.HOTEND|int %}
    {% set chamber = params.CHAMBER|default(0)|int %}

    # Set the parameters as persistent variables so they can be referenced outside of the macro (in PRINT_END)
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=bedtemp VALUE={bed}   
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=hotendtemp VALUE={hotend} 
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=chambertemp VALUE={chamber}   
    CLEAR_PAUSE                                                                          ; clear pause
    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0                                       ; cancel off timer (if there is one)
    _RESETSPEEDS                                                                         ; reset speed, accel etc to configured values
    
    SET_CASELIGHT VALUE=0.5                                                              ; turn on case lights
    SET_NOZZLE_LEDS_BY_NAME COLOR="WHITE"                                                ; turn on SB LEDs
    SET_LOGO_LEDS_BY_NAME COLOR="RED"

    SETUP_KAMP_MESHING DISPLAY_PARAMETERS=1 FUZZ_ENABLE=1 MARGIN_ENABLE=1 MARGIN_SIZE=10
    SETUP_LINE_PURGE  DISPLAY_PARAMETERS=1 ADAPTIVE_ENABLE=1 PURGE_AMOUNT=10  LINE_LENGTH=80 FLOW_RATE=12
    M140 S{bed}                                                                          ; set bed to target temp
    _CG28                                                                                ; home
    G90                                                                                  ; absolute positioning
    {% if printer['temperature_sensor chamber'].temperature < chamber or printer.heater_bed.temperature < (bed-2)  %}
        HEATSOAK T={bed} C={chamber} MOVE=1 WAIT=1                                       ;   heatsoak macro + park in center
    {% else %}                                                                           ; - if chamber is already at temp:
        HEATSOAK T={bed} C={chamber} MOVE=0 WAIT=1                                       ;       "heatsoak" without parking (only still calling this because it does some other things like turn off exahaust fan)
    {% endif %} 
    M190 S{bed}                                                                          ; wait for bed temp
    SET_LOGO_LEDS_BY_NAME COLOR="BLUE"
    PARKCLEAN                                                                            ; move to right of nozzle brush                        
    M109 S{printer["gcode_macro PRINT_SETUP"].cleaning_hotend_temp}                      ; set & wait for high hotend cleaning temp
    CLEANNOZZLE                                                                          ; clean nozzle while hot
    M109 S140                                                                            ; set & wait for low hotend cleaning temp
    M104 S0                                                                              ; set hotend temp to zero
    QUAD_GANTRY_LEVEL                                                                    ; quad gantry level
    G28 Z                                                                                ; home z
    G90                                                                                  ; absolute positioning
    SET_LOGO_LEDS_BY_NAME COLOR="PINK"
    BED_MESH_CLEAR
    BED_MESH_CALIBRATE                                                                   ; mesh
    PARKPREHEAT
    M109 S{hotend}                                                                       ; set & wait for hotend final temp
    NEVERMORE_START                                                                      ; activate nevermore filter if needed
    G92 E0                                                                               ; reset Extruder
    LINE_PURGE
    G92 E0                                                                               ; reset Extruder
    G0 Z2.0 F3000                                                                        ; move Z Axis up
    SET_LOGO_LEDS_BY_NAME COLOR="GREEN"
    #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                                 ; enable filament sensor
    G4 P1000                                                                             ; wait 1s

[gcode_macro PRINT_END]
gcode:
    #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                 ; disable filament sensor
    CLEAR_PAUSE                                                                          ; clear pause                                          
    M400                                                                                 ; wait for buffer to clear
    #G1 E-10.0 F1200                                                                     ; retract filament -10mm
    G92 E0                                                                               ; zero the extruder
    M104 S0                                                                              ; turn only the hotend off
    M140 S{printer["gcode_macro PRINT_START"].bedtemp|int}                               ; return the bed to temp, slicers like to turn it off
    M107                                                                                 ; turn off part cooling fan
    G91                                                                                  ; relative positioning
    G0 Z5 F3000                                                                          ; move nozzle up 5mm
    G90                                                                                  ; absolute positioning
    G0 X100 Y{printer.toolhead.axis_maximum.y-0.1} F3600                                 ; park nozzle at rear                            
    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=600                                     ; turn everything off in 10 min
    _RESETSPEEDS                                                                         ; reset speed, accel etc to configured max values
    SET_NOZZLE_LEDS_BY_NAME COLOR="OFF"                                                  ; turn off nozzle LEDs
    NEVERMORE_STOP

[delayed_gcode DELAYED_OFF]
gcode:
    OFF ; call "OFF" macro, to turn off everything (heaters, motors, lights, fans)

    
######################### PAUSE/RESUME/CANCEL #########################

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT

# Pause and park toolhead at front center. Z hop by 10mm.
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                  ; z hop amount
    {% if printer['pause_resume'].is_paused|int == 0 %}     
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                             ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}   ; set hotend temp variable for reference in resume macro
                                
        #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                ; disable filament sensor       
        SAVE_GCODE_STATE NAME=PAUSE                                                         ; save current print position for resume                
        BASE_PAUSE                                                                          ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}      ; check that zhop doesn't exceed z max
            G91                                                                             ; relative positioning
            G1 Z{z} F900                                                                    ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                 ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                 ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F5000 ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                     ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
        M104 S0                                                                             ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                      ; set timeout to 12 hours
    {% endif %}

# Return Z hop back down, prime nozzle, resume print.
[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}
    
    {% if printer['pause_resume'].is_paused|int == 1 %}
        #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                                                              ; enable filament sensor
        SET_LOGO_LEDS_BY_NAME COLOR="WHITE"                                                                              ; set logo LEDs back to white
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}                                      ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                                                            ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                                                         ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
        G91                                                                                                              ; relative positioning
        M83                                                                                                              ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                             
            G1 Z{zhop * -1} E{e} F900                                                                                    ; prime nozzle by E, lower Z back down
        {% else %}                      
            G1 Z{zhop * -1} F900                                                                                         ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}                             
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=100                                                             ; restore position
        BASE_RESUME                                                                                                      ; resume print
    {% endif %}

######################### MISC #########################

# Filament runout / change alias    
[gcode_macro M600]
gcode:
    SET_LOGO_LEDS_BY_NAME COLOR="GREEN" # Turn logo green
    PAUSE
    
# Disable filament sensor 1 sec after startup, only enable during prints (in PRINT_START/PRINT_END, and in PAUSE/RESUME)
[delayed_gcode DISABLEFILAMENTSENSOR]   
initial_duration: 1
gcode:
    #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0


[gcode_macro SHAPER_CAL]
gcode: 
    #RUN_SHELL_COMMAND CMD=rem_res_data
    #SHAPER_CALIBRATE AXIS=X FREQ_END=100
    #SHAPER_CALIBRATE AXIS=Y FREQ_END=100
    #RUN_SHELL_COMMAND CMD=gen_res_graph
    #SAVE_CONFIG


# Calls my "OFF" macro to shut off everything (lights etc), turns off LCD lighting, then shuts down the Pi
[gcode_macro SHUTDOWN]
gcode:
    OFF
    {action_respond_info('action:poweroff')}          ; OctoPrint compatible
    {action_call_remote_method("shutdown_machine")}   ; Moonraker compatible

[gcode_macro HEATSOAK]
gcode:
    # Parameters
    {% set t = params.T|default(110)|int %}
    {% set c = params.C|default(75)|int %}
    {% set move = params.MOVE|default(1)|int %}
    {% set wait = params.WAIT|default(0)|int %}

    SAVE_GCODE_STATE NAME=HEATSOAK
    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0    ; cancel off timer (if there is one)
    M104 S0                                           ; turn off hotend
    M140 S{t}                                         ; heat bed
    {% if move == 1 %}
        SET_LOGO_LEDS_BY_NAME COLOR=ORANGE            ; set logo to orange
        _CG28
        PARKPREHEAT
    {% endif %}
    {% if c > 30 and wait == 1 %}
        TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={c-10} ; wait for chamber temp - 10C
    {% endif %}
    RESTORE_GCODE_STATE NAME=HEATSOAK

# Replace M109 (Wait for Hotend Temperature) with TEMPERATURE_WAIT so we don't have to wait for PID to level off.
[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}

    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}

[gcode_macro _RESETSPEEDS]
gcode:
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} 
    SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}  
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer.configfile.settings.printer.square_corner_velocity} 

[gcode_macro G32]
gcode:
    G90
    G28
    #BED_MESH_CLEAR
    QUAD_GANTRY_LEVEL
    G28 Z

######################### CLEANING #########################

[gcode_macro CLEANNOZZLE]
gcode:
    # Parameters
    # Iterations
    {% set i = params.I|default(5)|int %}
    # Speed
    {% set s = params.S|default(100)|int %}
    _CG28
    SAVE_GCODE_STATE NAME=CLEANNOZZLE
    G90                                                   ; absolute positioning
    G0 X100 Z10 Y{printer.toolhead.axis_maximum.y-0.1} F5000  ; move to right of nozzle brush
    G0 Z2 F5000                                           ; move down to nozzle brush
    {% for iteration in range(i|int) %}
        G0 X45 F{s*60}                                    ; wipe back
        G0 X95 F{s*60}                                    ; wipe forth
    {% endfor %}
    G0 X100 F{s*60}                                       ; wipe back
    G0 Z10 F5000                                          ; raise
    RESTORE_GCODE_STATE NAME=CLEANNOZZLE

[gcode_macro TESTCLEAN]
gcode:
    G0 X100 Z10 Y{printer.toolhead.axis_maximum.y-0.1} F5000                             ; move to right of nozzle brush
    M109 S150                                                                            ; set & wait for hotend cleaning temp
    CLEANNOZZLE                                                                          ; clean nozzle while hot
    M109 S140                                                                            ; set & wait for hotend cleaning temp
    M104 S0                                                                              ; set hotend temp to zero


######################### FILAMENT #########################

[gcode_macro UNLOAD_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=UNLOADFILAMENT
    M83                                   ; set extruder to relative
    G1 E10 F600                           ; extrude a little to soften tip 
    G1 E-120 F1800                        ; retract filament completely
    RESTORE_GCODE_STATE NAME=UNLOADFILAMENT

[gcode_macro LOAD_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=LOADFILAMENT
    M83 ; set extruder to relative
    G1 E100 F600
    RESTORE_GCODE_STATE NAME=LOADFILAMENT
   
[gcode_macro HOT_UNLOAD]
gcode:
    # Parameters
    {% set t = params.T|default(255)|int %}
    
    M104 S{t}
    PARKFRONT
    M109 S{t}
    UNLOAD_FILAMENT
    
[gcode_macro HOT_LOAD]
gcode:
    # Parameters
    {% set t = params.T|default(255)|int %}
    
    M104 S{t}
    PARKFRONT
    M109 S{t}
    LOAD_FILAMENT

######################### CONDITIONALS #########################

# Conditional G28 (home if not already homed)
[gcode_macro _CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

[gcode_macro _CQGL]
gcode:
    {% if printer.quad_gantry_level.applied == False %}
        QUAD_GANTRY_LEVEL
        G28 Z
    {% endif %}
    
######################### PARKING #########################

# Park at clean position
[gcode_macro PARKCLEAN]
gcode:
    _CG28
    SAVE_GCODE_STATE NAME=PARKCLEAN
    G90
    G0 X100 Z10 Y{printer.toolhead.axis_maximum.y-0.1} F5000
    RESTORE_GCODE_STATE NAME=PARKCLEAN

# Park at preheat position
[gcode_macro PARKPREHEAT]
gcode:
    _CG28
    SAVE_GCODE_STATE NAME=PARKPREHEAT
    G90
    G0 Z{printer.toolhead.axis_maximum.z/2} F5000    
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F5000   
    RESTORE_GCODE_STATE NAME=PARKPREHEAT

# Park front center
[gcode_macro PARKFRONT]
gcode:
    _CG28
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F5000        
    RESTORE_GCODE_STATE NAME=PARKFRONT
    
# Park front center, but low down
[gcode_macro PARKFRONTLOW]
gcode:
    _CG28
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F5000                                     
    RESTORE_GCODE_STATE NAME=PARKFRONT
    
# Park top rear left
[gcode_macro PARKREAR]
gcode:
    _CG28
    SAVE_GCODE_STATE NAME=PARKREAR
    G90
    G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F5000     
    RESTORE_GCODE_STATE NAME=PARKREAR

# Park center of build volume
[gcode_macro PARKCENTER]
gcode:
    _CG28
    SAVE_GCODE_STATE NAME=PARKCENTER
    G90
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F5000    
    RESTORE_GCODE_STATE NAME=PARKCENTER
    
# Park 15mm above center of bed
[gcode_macro PARKBED]
gcode:
    _CG28
    SAVE_GCODE_STATE NAME=PARKBED
    G90
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F5000                                     
    RESTORE_GCODE_STATE NAME=PARKBED
    
######################### ALIASES/SHORTCUTS #########################

# Just a shortcut to turn EVERYTHING off with one command (beds, heaters, motors, lights)
[gcode_macro OFF]
gcode:
    M84                                  ; turn steppers off
    TURN_OFF_HEATERS                     ; turn bed / hotend off
    #M141 S0                              ; (TEST) turn off bed fans
    M107                                 ; turn print cooling fan off
    SET_CASELIGHT VALUE=0                ; turn light off
    SET_NOZZLE_LEDS_BY_NAME COLOR="OFF"  ; turn nozzle LEDs off
    SET_LOGO_LEDS_BY_NAME COLOR="WHITE"  ; set logo LED back to white
    
######################### TESTING #########################

[gcode_macro PRINT_TEST]
gcode: 
  M109 S{printer["gcode_macro PRINT_SETUP"].cleaning_hotend_temp} 

[gcode_macro DUMP_VARIABLES]
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}

[gcode_macro GET_VARIABLE]
gcode:
    {% set names = (params.NAME).split('.')|list %}
    {% set join = (params.JOIN)|default(1)|int %}
    
    {% set _dummy0 = namespace( break = 0 ) %}
    {% set _dummy1 = namespace( out = printer[names|first] ) %}
    
    {% for name in names if _dummy0.break == 0 %}
        {% if loop.index > 1 %}
            {% if name in _dummy1.out %}
                {% set _dummy1.out = _dummy1.out[name] %}
            {% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
                {% set _dummy1.out = _dummy1.out[name|int] %}
            {% else %}
                {% set _dummy0.break = loop.index0 %}
            {% endif %}
        {% endif %}
    {% endfor %}
    
    {% if _dummy1.out is boolean %}
        { action_respond_info('Type: boolean') }
    {% elif _dummy1.out is float %}
        { action_respond_info('Type: float') }
    {% elif _dummy1.out is integer %}
        { action_respond_info('Type: integer') }
    {% elif _dummy1.out is mapping %}
        { action_respond_info('Type: mapping') }
    {% elif _dummy1.out is string %}
        { action_respond_info('Type: string') }
    {% elif _dummy1.out is iterable %}
        { action_respond_info('Type: iterable') }
    {% elif _dummy1.out is none %}
        { action_respond_info('Type: none') }
    {% elif _dummy1.out is undefined %}
        { action_respond_info('Type: undefined') }
    {% elif _dummy1.out is callable %}
        { action_respond_info('Type: callable') }
    {% else %}
        { action_respond_info('Type: unknown') }
    {% endif %}
    
    {% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
        { action_respond_info('%s' % _dummy1.out|join("\n")) }
    {% else %}
        { action_respond_info('%s' % _dummy1.out) }
    {% endif %}
    
    {% if _dummy0.break != 0 %}
        { action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
    {% endif %}