######################### PRINT START / END #########################
[gcode_macro PRINT_START]
# For setting the parameters as persistent variables so they can be referenced in PRINT_START2
variable_bedtemp: 0
variable_hotendtemp: 0
variable_chambertemp: 0
gcode:      
    # Parameters
    {% set bed = params.BED|int %}
    {% set hotend = params.HOTEND|int %}
    {% set chamber = params.CHAMBER|default(0)|int %}

    # Set the parameters as persistent variables so they can be referenced outside of the macro (in PRINT_END)
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=bedtemp VALUE={bed}   
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=hotendtemp VALUE={hotend} 
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=chambertemp VALUE={chamber}   
    CLEAR_PAUSE                                                                          ; clear pause
    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0                                       ; cancel off timer (if there is one)
    _RESETSPEEDS                                                                         ; reset speed, accel etc to configured values
    
    #SET_CASELIGHT VALUE=0.5                                                              ; turn on case lights
    #SET_NOZZLE_LEDS_BY_NAME COLOR="WHITE"                                                ; turn on SB LEDs
    #SET_LOGO_LEDS_BY_NAME COLOR="RED"

    #SETUP_KAMP_MESHING DISPLAY_PARAMETERS=1 FUZZ_ENABLE=1 MARGIN_ENABLE=1 MARGIN_SIZE=10
    #SETUP_LINE_PURGE  DISPLAY_PARAMETERS=1 ADAPTIVE_ENABLE=1 PURGE_AMOUNT=10  LINE_LENGTH=100 FLOW_RATE=12
    M140 S{bed}                                                                          ; set bed to target temp
    _CG28                                                                                ; home
    G90                                                                                  ; absolute positioning
    #{% if printer['temperature_sensor chamber'].temperature < chamber or printer.heater_bed.temperature < (bed-2)  %}
    #    HEATSOAK T={bed} C={chamber} MOVE=1 WAIT=1                                       ;   heatsoak macro + park in center
    #{% else %}                                                                           ; - if chamber is already at temp:
    #    HEATSOAK T={bed} C={chamber} MOVE=0 WAIT=1                                       ;       "heatsoak" without parking (only still calling this because it does some other things like turn off exahaust fan)
    #{% endif %} 
    M190 S{bed}                                                                          ; wait for bed temp
    #SET_LOGO_LEDS_BY_NAME COLOR="BLUE"
    #PARKCLEAN                                                                            ; move to right of nozzle brush                        
    #M109 S{printer["gcode_macro PRINT_SETUP"].cleaning_hotend_temp}                      ; set & wait for high hotend cleaning temp
    #CLEANNOZZLE                                                                          ; clean nozzle while hot
    #M109 S140                                                                            ; set & wait for low hotend cleaning temp
    #M104 S0                                                                              ; set hotend temp to zero
    #QUAD_GANTRY_LEVEL                                                                    ; quad gantry level
    #G28 Z                                                                                ; home z
    #G90                                                                                  ; absolute positioning
    #SET_LOGO_LEDS_BY_NAME COLOR="PINK"
    #BED_MESH_CLEAR
    #BED_MESH_CALIBRATE                                                                   ; mesh
    #PARKPREHEAT
    Smart_Park
    M109 S{hotend}                                                                       ; set & wait for hotend final temp
    #NEVERMORE_START                                                                      ; activate nevermore filter if needed
    #G92 E0                                                                               ; reset Extruder
    LINE_PURGE
    G92 E0                                                                               ; reset Extruder
    G0 Z2.0 F3000                                                                        ; move Z Axis up
    #SET_LOGO_LEDS_BY_NAME COLOR="GREEN"
    #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                                 ; enable filament sensor
    #G4 P1000                                                                             ; wait 1s

[gcode_macro PRINT_END]
gcode:
    #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                 ; disable filament sensor
    CLEAR_PAUSE                                                                          ; clear pause                                          
    M400                                                                                 ; wait for buffer to clear
    #G1 E-10.0 F1200                                                                     ; retract filament -10mm
    G92 E0                                                                               ; zero the extruder
    TURN_OFF_HEATERS                                                                     ; turn heaters off
    M107                                                                                 ; turn off part cooling fan
    G91                                                                                  ; relative positioning
    G0 Z5 F3000                                                                          ; move nozzle up 5mm
    G90                                                                                  ; absolute positioning
    G0 X100 Y{printer.toolhead.axis_maximum.y-0.1} F3600                                 ; park nozzle at rear                            
    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=600                                     ; turn everything off in 10 min
    _RESETSPEEDS                                                                         ; reset speed, accel etc to configured max values
    #SET_NOZZLE_LEDS_BY_NAME COLOR="OFF"                                                  ; turn off nozzle LEDs
    #NEVERMORE_STOP

[delayed_gcode DELAYED_OFF]
gcode:
    OFF ; call "OFF" macro, to turn off everything (heaters, motors, lights, fans)

    
######################### PAUSE/RESUME/CANCEL #########################


# Calls my "OFF" macro to shut off everything (lights etc), turns off LCD lighting, then shuts down the Pi
[gcode_macro SHUTDOWN]
gcode:
    OFF
    {action_respond_info('action:poweroff')}          ; OctoPrint compatible
    {action_call_remote_method("shutdown_machine")}   ; Moonraker compatible

# Replace M109 (Wait for Hotend Temperature) with TEMPERATURE_WAIT so we don't have to wait for PID to level off.
[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}

    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}

[gcode_macro _RESETSPEEDS]
gcode:
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} 
    SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}  
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer.configfile.settings.printer.square_corner_velocity} 


######################### CONDITIONALS #########################

# Conditional G28 (home if not already homed)
[gcode_macro _CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

    
######################### MISC #########################
[gcode_macro T0]
gcode:
    RESPOND TYPE=echo MSG='Tool 0 selected - change filament'
    PAUSE

[gcode_macro T1]
gcode:
    RESPOND TYPE=echo MSG='Tool 1 selected - change filament'
    PAUSE

# Filament runout / change alias    
[gcode_macro M600]
gcode:
  RESPOND TYPE=echo MSG='M600'
    
######################### ALIASES/SHORTCUTS #########################

# Just a shortcut to turn EVERYTHING off with one command (beds, heaters, motors, lights)
[gcode_macro OFF]
gcode:
    M84                                  ; turn steppers off
    TURN_OFF_HEATERS                     ; turn bed / hotend off
    #M141 S0                              ; (TEST) turn off bed fans
    M107                                 ; turn print cooling fan off

    
######################### TESTING #########################

[gcode_macro PRINT_TEST]
gcode: 
  M109 S{printer["gcode_macro PRINT_SETUP"].cleaning_hotend_temp} 

[gcode_macro DUMP_VARIABLES]
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}

[gcode_macro GET_VARIABLE]
gcode:
    {% set names = (params.NAME).split('.')|list %}
    {% set join = (params.JOIN)|default(1)|int %}
    
    {% set _dummy0 = namespace( break = 0 ) %}
    {% set _dummy1 = namespace( out = printer[names|first] ) %}
    
    {% for name in names if _dummy0.break == 0 %}
        {% if loop.index > 1 %}
            {% if name in _dummy1.out %}
                {% set _dummy1.out = _dummy1.out[name] %}
            {% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
                {% set _dummy1.out = _dummy1.out[name|int] %}
            {% else %}
                {% set _dummy0.break = loop.index0 %}
            {% endif %}
        {% endif %}
    {% endfor %}
    
    {% if _dummy1.out is boolean %}
        { action_respond_info('Type: boolean') }
    {% elif _dummy1.out is float %}
        { action_respond_info('Type: float') }
    {% elif _dummy1.out is integer %}
        { action_respond_info('Type: integer') }
    {% elif _dummy1.out is mapping %}
        { action_respond_info('Type: mapping') }
    {% elif _dummy1.out is string %}
        { action_respond_info('Type: string') }
    {% elif _dummy1.out is iterable %}
        { action_respond_info('Type: iterable') }
    {% elif _dummy1.out is none %}
        { action_respond_info('Type: none') }
    {% elif _dummy1.out is undefined %}
        { action_respond_info('Type: undefined') }
    {% elif _dummy1.out is callable %}
        { action_respond_info('Type: callable') }
    {% else %}
        { action_respond_info('Type: unknown') }
    {% endif %}
    
    {% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
        { action_respond_info('%s' % _dummy1.out|join("\n")) }
    {% else %}
        { action_respond_info('%s' % _dummy1.out) }
    {% endif %}
    
    {% if _dummy0.break != 0 %}
        { action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
    {% endif %}